
/********************************************************************/
/* Copyright (C) SSE-USTC, 2013-2014                                */
/*                                                                  */
/*  FILE NAME             :  testlinktabe.c                         */
/*  PRINCIPAL AUTHOR      :  MaLong                               */
/*  SUBSYSTEM NAME        :  LinkTable                              */
/*  MODULE NAME           :  LinkTable                              */
/*  LANGUAGE              :  C                                      */
/*  TARGET ENVIRONMENT    :  ANY                                    */
/*  DATE OF FIRST RELEASE :  2013/09/20                             */
/*  DESCRIPTION           :  test of Link Table                     */
/********************************************************************/

/*
 * Revision log:
 *
 * Created by Mengning,2013/09/20
 * Verified callback and head/next for search by MaLong,2013/09/21
 *
 */


#include "LinkTable.h"
#include <string.h>
#include <stdlib.h>

#define SUCCESS 1
#define FAILURE 0

LinkTable * CreatLinkTable()
{
	LinkTable *pLink=(LinkTable *)malloc(sizeof(LinkTable));
	if(pLink == NULL)
	{
		return FAILURE;
	}
	pLink->Head=NULL;
	pLink->Tail=NULL;
	pLink->count=0;
	return pLink;
}



int InsertNode(LinkTable *pLink,void *data,int size)
{
	LinkNode *pnode=(LinkNode *)malloc(sizeof(LinkNode));
	if(pLink == NULL || data == NULL)
	{
		return FAILURE;
	}
	pnode->data = (void *)malloc(size);
	memcpy(pnode->data,data,size);
	pnode->next=NULL;

	if(pLink->count == 0)
	{
		pLink->Head=pnode;
		pLink->Tail=pnode;
		pLink->count += 1;
	}
	else
	{
		pLink->Tail->next=pnode;
		pLink->Tail=pnode;
		pLink->count += 1;
	}
	return SUCCESS;
}

void* SearchNode(LinkTable *pLink,int condition(void *data))
{
	LinkNode *tmp=pLink->Head;
	if(pLink == NULL )
	{
		return FAILURE;
	}
	while(tmp != NULL)
	{
		if(condition(tmp->data) != 0)
		{
			return tmp->data;
		}
		tmp=tmp->next;
	}
	printf("\nthis Informantio is not exits!");
	return FAILURE;
}


int DeleteNode(LinkTable *pLink,int condition(void *data))
{
	LinkNode *tmp=pLink->Head;
	if(pLink == NULL)
	{
		printf("this Link is empty!");
		return FAILURE;
	}
	if(condition(tmp->data) == 1)
	{
		tmp->next=tmp->next->next;
		return SUCCESS;
	}
	while(tmp != NULL)
	{
		if(condition(tmp->next->data) != 0)
		{
			tmp->next=tmp->next->next;
			pLink->count -= 1;
			if(pLink->count == 0)
			{
				pLink->Tail = NULL;
				pLink->Head=NULL;
			}
			return SUCCESS;
		}
		tmp=tmp->next;
	}
	printf("\nERROR! ");
	return FAILURE;
}


int Display(LinkTable *pLink,int display(void *data))
{
	LinkNode *tmp=pLink->Head;
	while(tmp != NULL)
	{
		display(tmp->data);
		tmp=tmp->next;
	}
	return SUCCESS;
}

int UpdataNode(LinkTable *pLink,int condition(void *data),void *handle())
{
	LinkNode *tmp=pLink->Head;
	if(pLink == NULL)
		return FAILURE;
	while(tmp != NULL)
	{
		if(condition(tmp->data) == 1)
		{
			pnode->data = (void *)malloc(sizeof(tmp->data));
			memcpy(tmp->data,handle(),sizeof(tmp->data));
			return SUCCESS;
		}
		tmp=tmp->next;
	}
	printf("\nthis information is not exist!");
	return	FAILURE;
}
